TerpreT benchmark #1: invert

invert :: [Bool] -> [Bool]
-- testing 4 combinations of argument values
-- pruning with 41/51 rules
-- 2 candidates of size 1
-- 0 candidates of size 2
-- 4 candidates of size 3
-- 0 candidates of size 4
-- 8 candidates of size 5
-- 1 candidates of size 6
-- tested 15 candidates
invert []  =  []
invert (p:ps)  =  not p:invert ps

TerpreT benchmark #2: prepend zero

prependZero :: [Bool] -> [Bool]
-- testing 3 combinations of argument values
-- pruning with 41/51 rules
-- 2 candidates of size 1
-- 0 candidates of size 2
-- 4 candidates of size 3
-- tested 3 candidates
prependZero ps  =  False:ps

TerpreT benchmark #3: binary decrement

decrement :: [Bool] -> [Bool]
-- testing 3 combinations of argument values
-- pruning with 41/51 rules
-- 2 candidates of size 1
-- 0 candidates of size 2
-- 4 candidates of size 3
-- 0 candidates of size 4
-- 8 candidates of size 5
-- 1 candidates of size 6
-- 16 candidates of size 7
-- 4 candidates of size 8
-- 35 candidates of size 9
-- 15 candidates of size 10
-- tested 71 candidates
decrement []  =  []
decrement (p:ps)
  | p  =  False:ps
  | otherwise  =  True:decrement ps

TerpreT benchmark #4: controlled shift

cshift :: (Bool,Bool,Bool) -> (Bool,Bool,Bool)
-- testing 4 combinations of argument values
-- pruning with 37/47 rules
-- reasoning produced 2 incorrect properties, please re-run with more tests for faster results
-- 1 candidates of size 1
-- 1 candidates of size 2
-- 0 candidates of size 3
-- 12 candidates of size 4
-- 125 candidates of size 5
-- 225 candidates of size 6
-- 665 candidates of size 7
-- 1242 candidates of size 8
-- 3087 candidates of size 9
-- 9281 candidates of size 10
-- 180325 candidates of size 11
-- tested 40097 candidates
cshift (p,q,r)
  | p  =  (p,r,q)
  | otherwise  =  (p,q,r)

cshift :: Bool -> Bool -> Bool -> (Bool,Bool,Bool)
-- testing 4 combinations of argument values
-- pruning with 37/47 rules
-- reasoning produced 2 incorrect properties, please re-run with more tests for faster results
-- 1 candidates of size 1
-- 0 candidates of size 2
-- 0 candidates of size 3
-- 125 candidates of size 4
-- 225 candidates of size 5
-- 585 candidates of size 6
-- 1242 candidates of size 7
-- 3090 candidates of size 8
-- tested 5266 candidates
cshift False p q  =  (False,p,q)
cshift True p q  =  (True,q,p)

TerpreT benchmark #5: full adder

fulladder :: Bool -> Bool -> Bool -> (Bool,Bool)
-- testing 8 combinations of argument values
-- pruning with 41/51 rules
-- 1 candidates of size 1
-- 0 candidates of size 2
-- 0 candidates of size 3
-- 0 candidates of size 4
-- 0 candidates of size 5
-- 0 candidates of size 6
-- 0 candidates of size 7
-- 1 candidates of size 8
-- tested 2 candidates
fulladder False False False  =  (False,False)
fulladder False False True  =  (False,True)
fulladder False True False  =  (False,True)
fulladder False True True  =  (True,False)
fulladder True False False  =  (False,True)
fulladder True False True  =  (True,False)
fulladder True True False  =  (True,False)
fulladder True True True  =  (True,True)

fulladder :: Bool -> Bool -> Bool -> (Bool,Bool)
-- testing 8 combinations of argument values
-- pruning with 28/38 rules
-- 1 candidates of size 1
-- 0 candidates of size 2
-- 9 candidates of size 3
-- 0 candidates of size 4
-- 36 candidates of size 5
-- 0 candidates of size 6
-- 144 candidates of size 7
-- 0 candidates of size 8
-- 774 candidates of size 9
-- 0 candidates of size 10
-- 4626 candidates of size 11
-- 0 candidates of size 12
-- 28872 candidates of size 13
-- tested 34462 candidates
fulladder  =  undefined  -- search exhausted
-- could not find implementation using only
-- (,), (^^), and (&&)
-- consider increasing target/maxSize or refining the ingredients

TerpreT benchmark #6: 2-bit adder

adder2 :: (Bool,Bool) -> (Bool,Bool) -> (Bool,Bool,Bool)
-- testing 5 combinations of argument values
-- pruning with 70/88 rules
-- reasoning produced 2 incorrect properties, please re-run with more tests for faster results
-- 1 candidates of size 1
-- 2 candidates of size 2
-- 1 candidates of size 3
-- 8 candidates of size 4
-- 128 candidates of size 5
-- 408 candidates of size 6
-- tested 548 candidates
adder2  =  undefined  -- search exhausted
-- could not find implementation using only
-- False, True, not, (&&), (||), [], (:), guarded equations, (,,), (==), and (^^)
-- consider increasing target/maxSize or refining the ingredients

TerpreT benchmark #7: access

access :: [A] -> Int -> A
-- testing 5 combinations of argument values
-- pruning with 0/0 rules
-- 1 candidates of size 1
-- 0 candidates of size 2
-- 1 candidates of size 3
-- tested 2 candidates
xs `access` x  =  xs !! x

access :: [A] -> Int -> A
-- testing 5 combinations of argument values
-- pruning with 4/7 rules
-- 1 candidates of size 1
-- 0 candidates of size 2
-- 0 candidates of size 3
-- 0 candidates of size 4
-- 3 candidates of size 5
-- 0 candidates of size 6
-- 3 candidates of size 7
-- tested 5 candidates
(x:xs) `access` 0  =  x
(x:xs) `access` y  =  xs `access` (y - 1)

TerpreT benchmark #8: decrement elements

decrelements :: [Int] -> [Int]
-- testing 3 combinations of argument values
-- pruning with 3/23 rules
-- 2 candidates of size 1
-- 0 candidates of size 2
-- 2 candidates of size 3
-- 1 candidates of size 4
-- 4 candidates of size 5
-- 6 candidates of size 6
-- 10 candidates of size 7
-- tested 25 candidates
decrelements []  =  []
decrelements (x:xs)  =  x - 1:decrelements xs

decrelements :: [Int] -> [Int]
-- testing 3 combinations of argument values
-- pruning with 5/26 rules
-- 2 candidates of size 1
-- 0 candidates of size 2
-- 2 candidates of size 3
-- 2 candidates of size 4
-- tested 6 candidates
decrelements  =  map (subtract 1)

