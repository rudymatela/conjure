sort :: [Int] -> [Int]
-- testing 360 combinations of argument values
-- pruning with 6/7 rules
-- 2 candidates of size 1
-- 2 candidates of size 2
-- 2 candidates of size 3
-- 7 candidates of size 4
-- 14 candidates of size 5
-- tested 15 candidates
sort []  =  []
sort (x:xs)  =  insert x (sort xs)

sort :: [Int] -> [Int]
-- testing 360 combinations of argument values
-- pruning with 1/2 rules
-- 2 candidates of size 1
-- 0 candidates of size 2
-- 0 candidates of size 3
-- 2 candidates of size 4
-- tested 4 candidates
sort  =  foldr insert []

insert :: Int -> [Int] -> [Int]
-- testing 4 combinations of argument values
-- pruning with 4/4 rules
-- 2 candidates of size 1
-- 0 candidates of size 2
-- 2 candidates of size 3
-- 0 candidates of size 4
-- 2 candidates of size 5
-- 2 candidates of size 6
-- 2 candidates of size 7
-- 0 candidates of size 8
-- 2 candidates of size 9
-- 0 candidates of size 10
-- 2 candidates of size 11
-- 0 candidates of size 12
-- 6 candidates of size 13
-- 0 candidates of size 14
-- 22 candidates of size 15
-- 0 candidates of size 16
-- 22 candidates of size 17
-- tested 53 candidates
insert x []  =  [x]
insert x (y:xs)
  | x <= y  =  x:insert y xs
  | otherwise  =  y:insert x xs

qsort :: [Int] -> [Int]
-- testing 360 combinations of argument values
-- pruning with 8/8 rules
-- 2 candidates of size 1
-- 0 candidates of size 2
-- 1 candidates of size 3
-- 0 candidates of size 4
-- 2 candidates of size 5
-- 3 candidates of size 6
-- 4 candidates of size 7
-- 12 candidates of size 8
-- 18 candidates of size 9
-- 46 candidates of size 10
-- 97 candidates of size 11
-- 187 candidates of size 12
-- 474 candidates of size 13
-- 915 candidates of size 14
-- tested 1225 candidates
qsort []  =  []
qsort (x:xs)  =  filter (x >) (qsort xs) ++ (x:filter (x <=) (qsort xs))

qsort :: [Int] -> [Int]
-- testing 360 combinations of argument values
-- pruning with 8/8 rules
-- 2 candidates of size 1
-- 0 candidates of size 2
-- 1 candidates of size 3
-- 0 candidates of size 4
-- 2 candidates of size 5
-- 3 candidates of size 6
-- 6 candidates of size 7
-- 22 candidates of size 8
-- 38 candidates of size 9
-- 122 candidates of size 10
-- 267 candidates of size 11
-- 625 candidates of size 12
-- 1636 candidates of size 13
-- 3505 candidates of size 14
-- tested 3377 candidates
qsort []  =  []
qsort (x:xs)  =  qsort (filter (x >) xs) ++ (x:qsort (filter (x <=) xs))

merge :: [Int] -> [Int] -> [Int]
-- testing 1080 combinations of argument values
-- pruning with 4/4 rules
-- 3 candidates of size 1
-- 0 candidates of size 2
-- 0 candidates of size 3
-- 10 candidates of size 4
-- 0 candidates of size 5
-- 6 candidates of size 6
-- 13 candidates of size 7
-- 6 candidates of size 8
-- 50 candidates of size 9
-- 14 candidates of size 10
-- 125 candidates of size 11
-- 68 candidates of size 12
-- 245 candidates of size 13
-- 434 candidates of size 14
-- 461 candidates of size 15
-- 2992 candidates of size 16
-- 2661 candidates of size 17
-- 13536 candidates of size 18
-- tested 20624 candidates
merge  =  undefined  -- search exhausted

merge :: [Int] -> [Int] -> [Int]
-- testing 360 combinations of argument values
-- pruning with 1/2 rules
-- 2 candidates of size 1
-- 0 candidates of size 2
-- 0 candidates of size 3
-- 6 candidates of size 4
-- 0 candidates of size 5
-- 4 candidates of size 6
-- 7 candidates of size 7
-- 4 candidates of size 8
-- 19 candidates of size 9
-- 44 candidates of size 10
-- 37 candidates of size 11
-- 218 candidates of size 12
-- 227 candidates of size 13
-- 616 candidates of size 14
-- tested 1184 candidates
merge  =  undefined  -- search exhausted

