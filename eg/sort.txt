sort :: [Int] -> [Int]
-- testing 360 combinations of argument values
-- pruning with 6/7 rules
-- 2 candidates of size 1
-- 2 candidates of size 2
-- 2 candidates of size 3
-- 7 candidates of size 4
-- 14 candidates of size 5
-- tested 15 candidates
sort []  =  []
sort (x:xs)  =  insert x (sort xs)

sort :: [Int] -> [Int]
-- testing 360 combinations of argument values
-- pruning with 1/2 rules
-- 2 candidates of size 1
-- 0 candidates of size 2
-- 0 candidates of size 3
-- 2 candidates of size 4
-- tested 4 candidates
sort  =  foldr insert []

insert :: Int -> [Int] -> [Int]
-- testing 4 combinations of argument values
-- pruning with 4/4 rules
-- 2 candidates of size 1
-- 0 candidates of size 2
-- 2 candidates of size 3
-- 0 candidates of size 4
-- 2 candidates of size 5
-- 2 candidates of size 6
-- 2 candidates of size 7
-- 4 candidates of size 8
-- 2 candidates of size 9
-- 8 candidates of size 10
-- 18 candidates of size 11
-- 16 candidates of size 12
-- 70 candidates of size 13
-- 32 candidates of size 14
-- 226 candidates of size 15
-- 64 candidates of size 16
-- 602 candidates of size 17
-- tested 519 candidates
insert x []  =  [x]
insert x (y:xs)
  | x <= y  =  x:insert y xs
  | otherwise  =  y:insert x xs

qsort :: [Int] -> [Int]
-- testing 360 combinations of argument values
-- pruning with 8/8 rules
-- 2 candidates of size 1
-- 0 candidates of size 2
-- 1 candidates of size 3
-- 0 candidates of size 4
-- 4 candidates of size 5
-- 3 candidates of size 6
-- 10 candidates of size 7
-- 21 candidates of size 8
-- 36 candidates of size 9
-- 105 candidates of size 10
-- 182 candidates of size 11
-- 471 candidates of size 12
-- 988 candidates of size 13
-- 2183 candidates of size 14
-- tested 2437 candidates
qsort []  =  []
qsort (x:xs)  =  filter (x >) (qsort xs) ++ (x:filter (x <=) (qsort xs))

qsort :: [Int] -> [Int]
-- testing 360 combinations of argument values
-- pruning with 8/8 rules
-- 2 candidates of size 1
-- 0 candidates of size 2
-- 1 candidates of size 3
-- 0 candidates of size 4
-- 4 candidates of size 5
-- 3 candidates of size 6
-- 16 candidates of size 7
-- 35 candidates of size 8
-- 80 candidates of size 9
-- 239 candidates of size 10
-- 478 candidates of size 11
-- 1325 candidates of size 12
-- 2980 candidates of size 13
-- 7159 candidates of size 14
-- tested 6564 candidates
qsort []  =  []
qsort (x:xs)  =  qsort (filter (x >) xs) ++ (x:qsort (filter (x <=) xs))

merge :: [Int] -> [Int] -> [Int]
-- testing 1080 combinations of argument values
-- pruning with 4/4 rules
-- 3 candidates of size 1
-- 0 candidates of size 2
-- 0 candidates of size 3
-- 10 candidates of size 4
-- 0 candidates of size 5
-- 16 candidates of size 6
-- 13 candidates of size 7
-- 22 candidates of size 8
-- 150 candidates of size 9
-- 36 candidates of size 10
-- 520 candidates of size 11
-- 760 candidates of size 12
-- 1514 candidates of size 13
-- 5044 candidates of size 14
-- 5522 candidates of size 15
-- tested 13610 candidates
merge  =  undefined  -- search exhausted

merge :: [Int] -> [Int] -> [Int]
-- testing 360 combinations of argument values
-- pruning with 1/2 rules
-- 2 candidates of size 1
-- 0 candidates of size 2
-- 0 candidates of size 3
-- 6 candidates of size 4
-- 0 candidates of size 5
-- 10 candidates of size 6
-- 7 candidates of size 7
-- 14 candidates of size 8
-- 57 candidates of size 9
-- 106 candidates of size 10
-- 160 candidates of size 11
-- 620 candidates of size 12
-- 982 candidates of size 13
-- tested 1964 candidates
merge  =  undefined  -- search exhausted

