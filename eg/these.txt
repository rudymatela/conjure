fromThese :: A -> B -> These A B -> (A,B)
-- testing 4 combinations of argument values
-- pruning with 0/0 rules
-- 0 candidates of size 1
-- 0 candidates of size 2
-- 1 candidates of size 3
-- 0 candidates of size 4
-- 0 candidates of size 5
-- 0 candidates of size 6
-- 0 candidates of size 7
-- 0 candidates of size 8
-- 0 candidates of size 9
-- 1 candidates of size 10
-- tested 2 candidates
fromThese x y None  =  (x,y)
fromThese x y (This z)  =  (z,y)
fromThese x y (That z)  =  (x,z)
fromThese x y (These z x')  =  (z,x')

listhese :: These A A -> [A]
-- testing 3 combinations of argument values
-- pruning with 0/0 rules
-- 1 candidates of size 1
-- 0 candidates of size 2
-- 0 candidates of size 3
-- 0 candidates of size 4
-- 0 candidates of size 5
-- 0 candidates of size 6
-- 0 candidates of size 7
-- 0 candidates of size 8
-- 0 candidates of size 9
-- 1 candidates of size 10
-- tested 2 candidates
listhese None  =  []
listhese (That x)  =  [x]
listhese (This x)  =  [x]
listhese (These x y)  =  [x,y]

cathis :: [These A B] -> [A]
-- testing 8 combinations of argument values
-- pruning with 3/3 rules
-- 1 candidates of size 1
-- 0 candidates of size 2
-- 0 candidates of size 3
-- 0 candidates of size 4
-- 0 candidates of size 5
-- 1 candidates of size 6
-- 2 candidates of size 7
-- 0 candidates of size 8
-- 1 candidates of size 9
-- 4 candidates of size 10
-- 2 candidates of size 11
-- tested 10 candidates
cathis []  =  []
cathis (t:ts)
  | isThis t  =  fromThis t:cathis ts
  | otherwise  =  cathis ts

cathat :: [These A B] -> [B]
-- testing 6 combinations of argument values
-- pruning with 3/3 rules
-- 1 candidates of size 1
-- 0 candidates of size 2
-- 0 candidates of size 3
-- 0 candidates of size 4
-- 0 candidates of size 5
-- 1 candidates of size 6
-- 2 candidates of size 7
-- 0 candidates of size 8
-- 1 candidates of size 9
-- 4 candidates of size 10
-- 2 candidates of size 11
-- tested 10 candidates
cathat []  =  []
cathat (t:ts)
  | isThat t  =  fromThat t:cathat ts
  | otherwise  =  cathat ts

cathis :: [These A B] -> [A]
-- testing 8 combinations of argument values
-- pruning with 0/0 rules
-- 1 candidates of size 1
-- 0 candidates of size 2
-- 0 candidates of size 3
-- 0 candidates of size 4
-- 0 candidates of size 5
-- 0 candidates of size 6
-- 0 candidates of size 7
-- 2 candidates of size 8
-- 6 candidates of size 9
-- 7 candidates of size 10
-- 13 candidates of size 11
-- tested 18 candidates
cathis []  =  []
cathis (None:ts)  =  cathis ts
cathis (This x:ts)  =  x:cathis ts
cathis (That x:ts)  =  cathis ts
cathis (These x y:ts)  =  x:cathis ts

cathat :: [These A B] -> [B]
-- testing 6 combinations of argument values
-- pruning with 0/0 rules
-- 1 candidates of size 1
-- 0 candidates of size 2
-- 0 candidates of size 3
-- 0 candidates of size 4
-- 0 candidates of size 5
-- 0 candidates of size 6
-- 0 candidates of size 7
-- 0 candidates of size 8
-- 2 candidates of size 9
-- 4 candidates of size 10
-- 3 candidates of size 11
-- tested 9 candidates
cathat []  =  []
cathat (None:ts)  =  cathat ts
cathat (This x:ts)  =  cathat ts
cathat (That x:ts)  =  x:cathat ts
cathat (These x y:ts)  =  y:cathat ts

cathese :: [These A A] -> [A]
-- testing 7 combinations of argument values
-- pruning with 0/0 rules
-- 1 candidates of size 1
-- 0 candidates of size 2
-- 0 candidates of size 3
-- 0 candidates of size 4
-- 0 candidates of size 5
-- 0 candidates of size 6
-- 0 candidates of size 7
-- 0 candidates of size 8
-- 4 candidates of size 9
-- 8 candidates of size 10
-- 11 candidates of size 11
-- 38 candidates of size 12
-- 26 candidates of size 13
-- 140 candidates of size 14
-- 57 candidates of size 15
-- tested 269 candidates
cathese []  =  []
cathese (None:ts)  =  cathese ts
cathese (That x:ts)  =  x:cathese ts
cathese (This x:ts)  =  x:cathese ts
cathese (These x y:ts)  =  x:y:cathese ts

